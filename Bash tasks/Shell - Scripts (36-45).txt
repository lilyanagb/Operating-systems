36. 2020-SE-01
if [ $# -ne 2 ]; then
    echo "There must be exactly two parameters." >&2
    exit 1
fi

if [ -f "$1" ]; then
    echo "This file already exists." >&2
    exit 2
fi

if [ ! -d "$2" ]; then
    echo "Please, provide an existing directory." >&2
    exit 3
fi

echo "hostname,phy,vlans,hosts,failover,VPN-3DES-AES,peers,VLAN Trunk Ports,license,SN,key" >> "$1"
while read filename; do
    no_space_file="$(sed "s/[[:space:]]//g" "$filename")"
    hostname="$(basename $filename | sed "s/\.log$//g")"
    phy="$(egrep "^MaximumPhysicalInterfaces:[0-9]*$" <<< "$no_space_file" | egrep -o "[0-9]+$")"
    vlans="$(egrep "^VLANs:[0-9]+$" <<< "$no_space_file" | egrep -o "[0-9]+$")"
    hosts="$(egrep "^InsideHosts:" <<< "$no_space_file" | egrep -o "[^:]+$")"
    failover="$(egrep "^Failover:" <<< "$no_space_file" | egrep -o "[^:]+$")"
    vpn="$(egrep "^VPN-3DES-AES:" <<< "$no_space_file" | egrep -o "[^:]+$")"
    total="$(egrep "^\*TotalVPNPeers:[0-9]+$" <<< "$no_space_file" | egrep -o "[0-9]+$")"
    ports="$(egrep "^VLANTrunkPorts:[0-9]+$" <<< "$no_space_file" | egrep -o "[0-9]+$")"
    license="$(sed -E -n 's/^This platform has (a|an) ([[:print:]]+) license.$/\2/p' "$filename")"
    serial="$(egrep "^SerialNumber:" <<< "$no_space_file" | egrep -o "[^:]+$")"
    key="$(egrep "^RunningActivationKey:" <<< "$no_space_file" | egrep -o "[^:]+$")"
done< <(find "$2" -type f -name "*.log" )
echo "${hostname},${phy},${vlans},${hosts},${failover},${vpn},${total},${ports},${license},${serial},${key}" >> "$1"
done

37. 2020-SE-02 
if [ $# -ne 1 ] || [ ! -f $1 ]; then
        echo "Wrong input format"
        exit 1
fi

sites=$(cat $1 | cut -d ' ' -f2 | sort | uniq -c | sort -nr | sed "s/^[[:space:]]*[[:digit:]]* //g" | head -n3)

while read site; do
        http=$(cat $1 | grep "$site" | awk 'BEGIN{total=0}{if($8 == "HTTP/2.0") total=total+1}END{print total}')
        nohttp=$(grep "$site" $1 | awk 'BEGIN{total=0}{if($8 != "HTTP/2.0") total=total+1}END{print total}')
        echo "$site HTTP/2.0: $http non-HTTP/2.0: $nohttp"
done < <(echo "$sites")

clients=$(mktemp) 

while read site; do
	cat $1 | grep "$site" | cut -d ' ' -f1 | sort | uniq -c >> clients
done < <(echo "$sites")

while read client; do
	cat lqlq.txt | grep "$client" | awk -v c=$client 'BEGIN{total=0}{total=total+$1}END{print total,c}'
done < <(cat lqlq.txt  | sed 's/^[[:blank:]]*//' | cut -d ' ' -f2) | sort -nr -t ' ' -k2 | uniq | sort -nr -t ' ' -k1 | head -n 5

rm "$clients"

38. 2020-SE-03
if [[ ! -d $1 ]]; then
    echo "Expecting directory"
    exit 2
fi

if [[ ! -d $2 ]]; then
    echo "Expecting directory"
    exit 2
fi

pkg=$2
repo=$1
temp_repo=$(mktemp)
tar -cvJf $temp_repo $pkg/tree

pkg_version="$(basename $pkg)-$(cat $pkg/version)"
sum=$(sha256sum $temp_repo | cut -d ' ' -f1 )

mv -f "$temp_repo" "$repo/packages/$sum.tar.xz"

temp_db=$(mktemp)
cat $repo/db | awk -v v=$pkg_version -v sum=$sum '$1 != v {print v, sum}' > $temp_db

sort -v $temp_db >> cat $repo/db

rm $temp_db $temp_repo

39. 2020-SE-04
if [[ $# -ne 2 ]]; then
        echo "Expecting 2 arguments"
        exit 1
fi


if [[ ! -d $1 ]]; then
        echo "Expecting directory"
        exit 2
fi

if [[ -d $2 ]]; then
        echo "directory should not exist "
        exit 2
fi

mkdir -p $2/images

while read -rd $'\0' path; do
        #echo $path
        file=$(basename "${path}")
        sum=$(sha256sum "$path"| cut -c 1-16)
        title=$( echo "$file" | sed -E 's/\([^()]+\)//g'| tr -s ' ' )

        date=$(stat -c "%y" "$path" | cut -d ' ' -f1)
        cp $path $2/images/$sum.jpg

        if ! echo "${file}" | egrep -q '\(.*\)'; then
        	album=misc
    	else
        	album="$(basename "$path" .jpg | sed 's/.*\((.*)\).*/\1/' | tr -s ' ')"
   	 fi

   	echo $album
        #ln -s $2/images/$sum.jpg $2/by-date/$date/by-album/$album/by-title/$title
        #ln -s $2/images/$sum.jpg $2/by-date/$date/by-title/$title
        #ln -s $2/images/$sum.jpg $2/by-album/$album/by-date/$date/by-title/$title
        #ln -s $2/images/$sum.jpg $2/by-album/$album/by-title/$title
        #ln -s $2/images/$sum.jpg $2/by-title/$title
done < <(find $1 -type f -name "*.jpg"  -print0)

40. 2020-SE-05
if [[ $# -ne 3 ]]; then
        echo "Expecting 3 argument"
        exit 1
fi

if [[ ! -f $1 ]]; then
        echo "Expecting file"
        exit 2
fi

if [[ ! -f $2 ]]; then
        echo "Expecting file"
        exit 2
fi

if [[ ! -d $3 ]]; then
        echo "Expecting dir"
        exit 2
fi

while read file; do
        file_name=$(basename "$file" .cfg)

        if cat $file | egrep -q "^[^#{]"; then
                echo "Error in $(basename $file)"
                cat $file | awk ' $1 ~ /[^#{]/ {print "Line",NR":", $0}'
        else
                cat $file >> $2
                if egrep -q "^$file_name:" $1; then
                        password=$(pwgen 16 1)
                        hass_pass=$(echo $password | md5sum | cut -d ' ' -f1)
                        echo "$file_name:$hash_pass" >> $1
                        echo "$file_name:$hash_pass"
                fi
        fi
done < <(find $3 -type f -name "*.cfg")

41. 2020-SE-06
if [ $# -ne 3 ]; then
    echo "There have to be exactly three params." >&2
    exit 1
fi

if [ ! -f "$1" -o ! -r "$1" ]; then
    echo "The given file does not exist or is not readable." >&2
    exit 2
fi

if ! egrep -qn "^[[:space:]]*$2[[:space:]]*=" "$1"; then
    echo "$2 = $3 # added at $(date) by $(whoami)" >> "$1"
    exit 0
fi

while read line; do
//добавя коментар (символът #) в началото на реда, който се намира на позиция ${line} във файла $1
    sed -i "${line}s/^/# /" "$1" 
    sed -i "${line}s/$/ # edited at $(date) by $(whoami)/" "$1"
    sed -i "${line}s/$/\n$2 = $3 # added at $(date) by $(whoami)/g" "$1" 
done <<< "$(egrep -n "^[[:space:]]*$2[[:space:]]*=" "$1" | sed -E "s/^([0-9]+):(.*)$/\1/g")"

Втори начин:
key="${2}"
value="${3}"
date=$(date)
user=$(whoami)

if egrep -q "$key\s+=" $file; then
        cat $file | awk -v key="$key" -v value="$value" -v date="$date" -v user="$user"  '{ if ($1 == key) {print "#",$0, "# added at",date,"by",user; print key,"=",value,"# added at" ,date, "by", user } else { print $0 } }'
else
        echo "$key = $value # added at $date by $user" >> $file
fi

42. 2021-SE-01
if [[ $(whoami) != "oracle" ]] || [[ $(whoami) != "grid" ]]; then
        echo "ERROR: should be run with oracle or grid" >&2
        exit 42
fi

if [ -z "${ORACLE_HOME}" ]; then
        echo "ERROR: ORACLE_HOME not set" >&2
        exit 43
fi

ADRCI=${ORACLE_HOME}/bin/adrci

if [[ ! -x $ADRCI ]]; then
        echo "There is not executable permissions"
        exit 2
fi

diag_dest="/u01/app/$(whoami)"

adrci_cmd=$( $ADRCI exec="show homes")

if [[ "$adrci_cmd" == "No ADR homes are set" ]]; then
        echo "ERROR: No ADR homes are set" >&2
        exit 45
else
        # ne sum sigyrna kakvo shte napravi tova echo :D
        echo $adrci_cmd | tail -2 | sed 's/(.*)/$diag_dest\/\1/'| xargs du -m

43. 2021-SE-02
if [[ $# -eq 0 ]]; then
        echo "Expecting zone files"
        exit 1
fi


update_serial() {
        serial=$1
        file=$2

        cur_date=$(date +"%Y%m%d")

        if [[ "$serial" =~ "^$cur_date" ]]; then
                #think for check of last two digit 0-99
        new_serial=$(( serial + 1 ))
    else
        new_serial="${cur_date}00"
    fi

        sed -i "s/$serial/$new_serial/" $file
}


for file in "${@}"; do
        first_line=$(head -1 $file)
        #echo $first_line
        if echo "$first_line" | grep -qv "SOA"; then
                echo "There is no SOA record in $file"
                continue
        elif echo "$first_line" | egrep -q "^([a-z0-9]+\.)+\s([0-9]+\s)?IN\sSOA\s([a-z0-9]+\.)+\s([a-z0-9]+\.)+(\s[0-9]+)+"; then
                serial=$(echo $first_line| awk '{if(NF==11) {print $7} else {print $6}}')
                update_serial $serial $file
        elif echo "$first_line" | egrep -q "^([a-z0-9]+\.)+\s([0-9]+\s)?IN\sSOA(\s([a-z0-9]+\.)+){2}\s\("; then

                serial=$(sed -n '2p' $file| awk -F ';' '{print $1}')

                update_serial $serial $file

        fi
done

44. 2021-SE-03
if [[ $# -ne 2 ]]; then
        echo "Expecting 2 arguments"
        exit 1
fi

if [[ ! -f $1 ]]; then
        echo "Expecting file"
        exit 2
fi


if [[ ! -f $2 ]]; then
   echo "Expecting file"
   exit 2
fi

input_file=$1
output_file=$2
fs=$( stat -c "%s" $input_file)
arr_size=$(( $fs / 2 ))

if [[ $(( $fs % 2 )) -ne 0 ]]; then
        echo "Corrupted input file "
        exit 2
fi

if [[ $arr_size -gt  524288 ]]; then
        echo "file too big"
        exit 3
fi

echo -e "#include <stdio.h>\n" >> $output_file
echo -e "const uint32_t arrN = $arr_size;\n" >> $output_file
echo "const int arr[arrN] = {" >> $output_file

xxd $input_file | cut -d ' ' -f2-9 | sed -E 's/([0-9a-f]{2})([0-9a-f]{2})/\2\1/g'| tr '\n' ' ' | sed -E 's/([^ ]{4})/0x\1,/g'| sed -E 's/(.*),.*/\1/' >> $output_file
echo "};" >> $output_file


#check input file size 524288

45. 2021-SE-04
user=$(whoami)

if [[ $user != "oracle" ]] || [[ $user != "grid" ]]; then
        echo "ERROR: should be run with oracle or grid" >&2
        exit 42
fi

if [ -z "${ORACLE_HOME}" ]; then
        echo "ERROR: ORACLE_HOME not set" >&2
        exit 43
fi

if [[ $# -ne 1 ]]; then
        echo "Expecting  argument"
        exit 1
fi

if ! [[ "${1}" =~ ^[0-9]+$ ]]; then
        echo "Expecting number"
        exit 2
fi


ADRCI=${ORACLE_HOME}/bin/adrci
diag_dest=/u01/app/$user
HH=$1
MM=$(( 60 * HH ))

adrci_homes=$( $ADRCI exec="SET BASE ${diag_dest}; SHOW HOMES")

if [[ $adrci_homes == "No ADR homes are set" ]]; then
        echo "ERROR: No ADR homes are set" >&2
        exit 3
fi

home_list=$( echo $adrci_homes | tail -n +2 | egrep '^diag/(crs|tnslsnr|kfod|asm|rdbms)/' | xargs)


for dir in $home_list; do
        ${ADRCI} exec="SET BASE ${diag_dest}; SET HOMEPATH ${dir}; PURGE -AGE ${MM}"
done
